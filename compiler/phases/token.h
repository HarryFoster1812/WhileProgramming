#pragma once

enum TOKEN_TYPE {
  TOKEN_VARIABLE,
  TOKEN_NUMBER,
  TOKEN_ASSIGNMENT,
  TOKEN_SEMICOLON,
  TOKEN_WHILE,
  TOKEN_DO,
  TOKEN_IF,
  TOKEN_THEN,
  TOKEN_ELSE,
  TOKEN_INPUT,
  TOKEN_WRITE,
  TOKEN_L_CURLY,
  TOKEN_R_CURLY,
  TOKEN_L_PAREN,
  TOKEN_R_PAREN,
  TOKEN_PLUS,
  TOKEN_MINUS,
  TOKEN_LEQ,
  TOKEN_EQUAL,
  TOKEN_NOT,
  TOKEN_AND,
  TOKEN_TRUE,
  TOKEN_FALSE,
  TOKEN_SKIP,
  TOKEN_EOF,
  TOKEN_UNKNOWN // optional, for error recovery
};

const char *TOKEN_TYPE_MAP[] = {
    "TOKEN_VARIABLE", "TOKEN_NUMBER",  "TOKEN_ASSIGNMENT", "TOKEN_SEMICOLON",
    "TOKEN_WHILE",    "TOKEN_DO",      "TOKEN_IF",         "TOKEN_THEN",
    "TOKEN_ELSE",     "TOKEN_INPUT",   "TOKEN_WRITE",      "TOKEN_L_CURLY",
    "TOKEN_R_CURLY",  "TOKEN_L_PAREN", "TOKEN_R_PAREN",    "TOKEN_PLUS",
    "TOKEN_MINUS",    "TOKEN_LEQ",     "TOKEN_EQUAL",      "TOKEN_NOT",
    "TOKEN_AND",      "TOKEN_TRUE",    "TOKEN_FALSE",      "TOKEN_SKIP",
    "TOKEN_EOF",      "TOKEN_UNKNOWN"};

typedef struct {
  enum TOKEN_TYPE type;
  int line_number;
  int col_number;
  char *lexeme;
} TOKEN_T;
